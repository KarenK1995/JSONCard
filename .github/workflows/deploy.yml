name: Deploy to DigitalOcean Server

on:
  push:
    branches: [ main ]

jobs:
  # Skipped build-and-test job for faster deployment
  # build-and-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '22'
  #       cache: 'npm'
  #   - name: Install dependencies (Root)
  #     run: npm install

  deploy:
    # needs: build-and-test  # Removed dependency
    runs-on: ubuntu-latest
    # Deploy whenever main branch is updated (includes PR merges)
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to DigitalOcean Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "=== SSH Connection Successful ==="
          whoami
          pwd
          echo "=== Starting Deployment ==="
          
          # Navigate to the correct project directory
          cd /var/www/JSONCard || { echo "Directory /var/www/JSONCard not found, creating..."; mkdir -p /var/www/JSONCard; cd /var/www/JSONCard; }
          
          echo "Current directory: $(pwd)"
          
          # Initialize git repository if it doesn't exist
          if [ ! -d ".git" ]; then
            echo "Cloning repository..."
            git clone https://github.com/tiko8428/JSONCard.git .
            echo "Repository cloned successfully"
          else
            echo "Repository exists, pulling latest changes..."
            git fetch origin
            echo "Before pull - Current commit: $(git rev-parse HEAD)"
            git pull origin main
            echo "After pull - Current commit: $(git rev-parse HEAD)"
            echo "Latest commit message: $(git log -1 --pretty=format:'%s')"
          fi
          
          echo "Installing dependencies..."
          npm install --production
          
          echo "Checking PM2 process..."
          if pm2 describe app > /dev/null 2>&1; then
            echo "Restarting existing PM2 process 'app'..."
            pm2 restart app
          else
            echo "PM2 process 'app' not found. Starting new process..."
            pm2 start ecosystem.config.js
          fi
          
          pm2 save
          echo "=== Deployment completed successfully! ==="
          echo "PM2 Status:"
          pm2 status